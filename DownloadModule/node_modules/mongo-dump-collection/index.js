const mongoose = require('mongoose')
const ObjectsToCsv = require('objects-to-csv')

const _isMongoConnected = () => mongoose.connection.readyState === 1

const _findOrCreateConnection = async mongoConnectionString => {
    let isReusingConnection = false

    if (_isMongoConnected()) {
        isReusingConnection = true
    } else {
        await mongoose.connect(mongoConnectionString, { useNewUrlParser: true, useUnifiedTopology: true })
    }

    return isReusingConnection
}

const _areRequiredAttributesPresent = ({ mongoConnectionString, collectionName }) => mongoConnectionString && collectionName

const _findAllCollectionDocuments = async ({ mongoConnectionString, collectionName }) => {
    const isReusingConnection = await _findOrCreateConnection(mongoConnectionString)

    const geneticSchema = new mongoose.Schema({ _id: String }, { strict: false })
    const GenericModel = mongoose.model('anyModel', geneticSchema, collectionName)
    const documents = await GenericModel.find({}).exec()

    if (!isReusingConnection) mongoose.connection.close()

    return documents
}

const _saveDocumentsAsCSV = async (documents, outputPath) => {
    const csv = new ObjectsToCsv(documents.map(document => document._doc))
    await csv.toDisk(outputPath)
}

const dumpCollectionAsCSV = async options => {
    const { outputPath = './dump.csv' } = options

    if (!_areRequiredAttributesPresent(options))
        throw new Error('mongoConnectionString and collectionName are required options.')

    const documents = await _findAllCollectionDocuments(options)
    await _saveDocumentsAsCSV(documents, outputPath)
}

module.exports = dumpCollectionAsCSV