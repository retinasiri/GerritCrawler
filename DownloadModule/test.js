const Axios = require('axios');
const Moment = require('moment');
const MathJs = require('mathjs');
const fs = require('fs');

const MetricsUtils = require('./compute_metrics/metrics-utils');


//console.log(MathJs.min([undefined, undefined, undefined]))
//console.log([undefined, undefined, undefined].length)

//let apiEndpoint = "https://android-review.googlesource.com/changes/?q=status:merged+project:platform/system/bt&n=5&o=DETAILED_LABELS&o=ALL_REVISIONS&o=ALL_COMMITS&o=ALL_FILES&o=DETAILED_ACCOUNTS&o=MESSAGES&o=DOWNLOAD_COMMANDS&o=WEB_LINKS&o=CHANGE_ACTIONS&o=REVIEWED&o=REVIEWER_UPDATES&o=COMMIT_FOOTERS&S=10500"

/*Axios.get(apiEndpoint)
    .then(response => {
        console.log(response)
    })
    .catch(function (err) {
        if (err.response) {
            //console.log(err.response.data);
            console.log(err.response.status);
            //console.log(err.response.headers);
        }
    });*/

let projectName = 'asterisk'

/*let json = require('/Users/jeefer/Desktop/code_changes/asterisk.json');
test(json)

function test(jsonArray) {
    for (let k in jsonArray) {
        let json = jsonArray[k]
        //console.log(k)
        collectMetadata(json)
    }
}*/

let json =[ {
    "id" : "core~master~Iee5ed15d58ea88e65ee7854bd05a87ceab22023d",
    "_number" : 117104,
    "actions" : {},
    "branch" : "master",
    "change_id" : "Iee5ed15d58ea88e65ee7854bd05a87ceab22023d",
    "created" : "2021-06-14 02:18:50.000000000",
    "current_revision" : "7cf742e7901767fad19fa378ee028be3b76a4159",
    "deletions" : 530,
    "files_list" : [
        "basegfx/source/tuple/b2dtuple.cxx",
        "basegfx/test/B2DTupleTest.cxx",
        "include/basegfx/tuple/Tuple2D.hxx",
        "include/basegfx/tuple/Tuple3D.hxx",
        "include/basegfx/tuple/b2dtuple.hxx",
        "include/basegfx/tuple/b2i64tuple.hxx",
        "include/basegfx/tuple/b2ituple.hxx",
        "include/basegfx/tuple/b3dtuple.hxx",
        "include/basegfx/tuple/b3ituple.hxx"
    ],
    "has_review_started" : true,
    "hashtags" : [],
    "insertions" : 517,
    "labels" : {
        "Verified" : {
            "all" : [
                {
                    "value" : 0,
                    "permitted_voting_range" : {
                        "min" : -1,
                        "max" : 1
                    },
                    "_account_id" : 1000855,
                    "name" : "Jenkins",
                    "username" : "ci"
                }
            ],
            "values" : {
                "-1" : "Fails",
                " 0" : "No score",
                "+1" : "Verified"
            },
            "default_value" : 0
        },
        "Code-Review" : {
            "all" : [
                {
                    "value" : 0,
                    "permitted_voting_range" : {
                        "min" : -1,
                        "max" : 1
                    },
                    "_account_id" : 1000855,
                    "name" : "Jenkins",
                    "username" : "ci"
                }
            ],
            "values" : {
                "-2" : "Do not merge",
                "-1" : "This need some tweaks before it is merged",
                " 0" : "No score",
                "+1" : "Looks good to me, but someone else must approve",
                "+2" : "Looks good to me, approved"
            },
            "default_value" : 0
        }
    },
    "mergeable" : true,
    "messages" : [
        {
            "id" : "ed27df328aca89dad224de69895137072d960562",
            "tag" : "autogenerated:gerrit:newPatchSet",
            "author" : {
                "_id" : ObjectId("60e75b876205c14ab9b02e11"),
                "_account_id" : 1000154,
                "name" : "Tomaž Vajngerl",
                "email" : "quikee@gmail.com",
                "username" : "tvajngerl"
            },
            "real_author" : {
                "_account_id" : 1000154,
                "name" : "Tomaž Vajngerl",
                "email" : "quikee@gmail.com",
                "username" : "tvajngerl"
            },
            "date" : "2021-06-14 02:18:50.000000000",
            "message" : "Uploaded patch set 1.",
            "_revision_number" : 1
        },
        {
            "id" : "2420fac5bb388b34f28949b4891482754b98e77a",
            "author" : {
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "real_author" : {
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "date" : "2021-06-14 02:19:14.000000000",
            "message" : "Patch Set 1:\n\nBuild queued https://ci.libreoffice.org/job/gerrit_master/87774/",
            "_revision_number" : 1
        },
        {
            "id" : "a486252df1e2c6df17d3b36bdac6c25923c65fff",
            "author" : {
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "real_author" : {
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "date" : "2021-06-14 03:29:13.000000000",
            "message" : "Patch Set 1: Verified-1\n\nBuild Failed \n\nhttps://ci.libreoffice.org/job/gerrit_master/87774/ : FAILURE\n\nVisual studio complained about error C2672: \"CppUnit::assertEquals\": no matching overloaded function found in file C:/cygwin/home/tdf/lode/jenkins/workspace/gerrit_windows/basegfx/test/B2DTupleTest.cxx(72) ( https://ci.libreoffice.org/job/gerrit_windows/98350/ )",
            "_revision_number" : 1
        },
        {
            "id" : "a08a32a6dbf6c478acb638d7b68bb3696a8a6240",
            "tag" : "autogenerated:gerrit:newPatchSet",
            "author" : {
                "_account_id" : 1000154,
                "name" : "Tomaž Vajngerl",
                "email" : "quikee@gmail.com",
                "username" : "tvajngerl"
            },
            "real_author" : {
                "_account_id" : 1000154,
                "name" : "Tomaž Vajngerl",
                "email" : "quikee@gmail.com",
                "username" : "tvajngerl"
            },
            "date" : "2021-06-14 11:14:51.000000000",
            "message" : "Uploaded patch set 2.",
            "_revision_number" : 2
        },
        {
            "id" : "1f14a4dcfee8e9b7b8e1de8406205b9ff99360ac",
            "author" : {
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "real_author" : {
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "date" : "2021-06-14 11:16:59.000000000",
            "message" : "Patch Set 2:\n\nBuild queued https://ci.libreoffice.org/job/gerrit_master/87819/",
            "_revision_number" : 2
        },
        {
            "id" : "87d49049f419ae18811578fb0374ff5394f5482a",
            "author" : {
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "real_author" : {
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "date" : "2021-06-14 14:05:15.000000000",
            "message" : "Patch Set 2: Verified-1\n\nBuild Failed \n\nhttps://ci.libreoffice.org/job/gerrit_master/87819/ : FAILURE\n\nUncategorized build failure. If it is generic enough, please add a suitable Cause for it. ( https://ci.libreoffice.org/job/gerrit_master/87819/ )",
            "_revision_number" : 2
        },
        {
            "id" : "0592ba22852abba9979a331228a86edbb5be6011",
            "tag" : "autogenerated:gerrit:newPatchSet",
            "author" : {
                "_account_id" : 1000154,
                "name" : "Tomaž Vajngerl",
                "email" : "quikee@gmail.com",
                "username" : "tvajngerl"
            },
            "real_author" : {
                "_account_id" : 1000154,
                "name" : "Tomaž Vajngerl",
                "email" : "quikee@gmail.com",
                "username" : "tvajngerl"
            },
            "date" : "2021-06-14 23:07:17.000000000",
            "message" : "Uploaded patch set 3: Patch Set 2 was rebased.",
            "_revision_number" : 3
        },
        {
            "id" : "e152b1ae943777decc7966c20567bed45dce8972",
            "author" : {
                "_id" : ObjectId("60e75b876205c14ab9b02e1f"),
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "real_author" : {
                "_id" : ObjectId("60e75b876205c14ab9b02e20"),
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "date" : "2021-06-14 23:07:48.000000000",
            "message" : "Patch Set 3:\n\nBuild queued https://ci.libreoffice.org/job/gerrit_master/87908/",
            "_revision_number" : 3
        },
        {
            "id" : "628996f7d70b4de58bc5ad2e05c499f1964a5a86",
            "author" : {
                "_id" : ObjectId("60e75b876205c14ab9b02e21"),
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "real_author" : {
                "_id" : ObjectId("60e75b876205c14ab9b02e22"),
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "date" : "2021-06-15 00:33:05.000000000",
            "message" : "Patch Set 3: Verified-1\n\nBuild Failed \n\nhttps://ci.libreoffice.org/job/gerrit_master/87908/ : FAILURE\n\nUncategorized build failure. If it is generic enough, please add a suitable Cause for it. ( https://ci.libreoffice.org/job/gerrit_master/87908/ )",
            "_revision_number" : 3
        },
        {
            "id" : "1d5af4d56a8023cd6828feff96101170cc53315f",
            "tag" : "autogenerated:gerrit:newPatchSet",
            "author" : {
                "_id" : ObjectId("60e75b876205c14ab9b02e23"),
                "_account_id" : 1000154,
                "name" : "Tomaž Vajngerl",
                "email" : "quikee@gmail.com",
                "username" : "tvajngerl"
            },
            "real_author" : {
                "_id" : ObjectId("60e75b876205c14ab9b02e24"),
                "_account_id" : 1000154,
                "name" : "Tomaž Vajngerl",
                "email" : "quikee@gmail.com",
                "username" : "tvajngerl"
            },
            "date" : "2021-06-15 03:27:52.000000000",
            "message" : "Uploaded patch set 4: Patch Set 3 was rebased.",
            "_revision_number" : 4
        },
        {
            "id" : "c3b13196804fb67bb644429eeb67b18236f5e3c6",
            "author" : {
                "_id" : ObjectId("60e75b876205c14ab9b02e25"),
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "real_author" : {
                "_id" : ObjectId("60e75b876205c14ab9b02e26"),
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "date" : "2021-06-15 03:28:23.000000000",
            "message" : "Patch Set 4:\n\nBuild queued https://ci.libreoffice.org/job/gerrit_master/87916/",
            "_revision_number" : 4
        }
    ],
    "owner" : {
        "_id" : ObjectId("60e75b876205c14ab9b02e0c"),
        "_account_id" : 1000154,
        "name" : "Tomaž Vajngerl",
        "email" : "quikee@gmail.com",
        "username" : "tvajngerl"
    },
    "pending_reviewers" : {},
    "project" : "core",
    "removable_reviewers" : [],
    "requirements" : [],
    "reviewer_updates" : [
        {
            "updated" : "2021-06-14 02:19:14.000000000",
            "updated_by" : {
                "_id" : ObjectId("60e75b876205c14ab9b02e0d"),
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "reviewer" : {
                "_id" : ObjectId("60e75b876205c14ab9b02e0e"),
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "state" : "CC"
        },
        {
            "updated" : "2021-06-14 03:29:13.000000000",
            "updated_by" : {
                "_id" : ObjectId("60e75b876205c14ab9b02e0f"),
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "reviewer" : {
                "_id" : ObjectId("60e75b876205c14ab9b02e10"),
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            },
            "state" : "REVIEWER"
        }
    ],
    "reviewers" : {
        "REVIEWER" : [
            {
                "_account_id" : 1000855,
                "name" : "Jenkins",
                "username" : "ci"
            }
        ]
    },
    "revisions" : {
        "7cf742e7901767fad19fa378ee028be3b76a4159" : {
            "kind" : "TRIVIAL_REBASE",
            "_number" : 4,
            "created" : "2021-06-15 03:27:52.000000000",
            "uploader" : {
                "_account_id" : 1000154,
                "name" : "Tomaž Vajngerl",
                "email" : "quikee@gmail.com",
                "username" : "tvajngerl"
            },
            "ref" : "refs/changes/04/117104/4",
            "fetch" : {
                "anonymous http" : {
                    "url" : "https://git.libreoffice.org/core",
                    "ref" : "refs/changes/04/117104/4",
                    "commands" : {
                        "Branch" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/4 && git checkout -b change-117104-4 FETCH_HEAD",
                        "Checkout" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/4 && git checkout FETCH_HEAD",
                        "Cherry Pick" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/4 && git cherry-pick FETCH_HEAD",
                        "Format Patch" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/4 && git format-patch -1 --stdout FETCH_HEAD",
                        "Pull" : "git pull \"https://git.libreoffice.org/core\" refs/changes/04/117104/4"
                    }
                }
            },
            "commit" : {
                "parents" : [
                    {
                        "commit" : "d5c134f0562bd2603a5063db6f3344bea17e380d",
                        "subject" : "vcl: outdevmap.hxx -> rendercontext/ImplMapRes.hxx",
                        "web_links" : [
                            {
                                "name" : "browse",
                                "url" : "https://git.libreoffice.org/core/commit/d5c134f0562bd2603a5063db6f3344bea17e380d",
                                "target" : "_blank"
                            }
                        ]
                    }
                ],
                "author" : {
                    "name" : "Tomaž Vajngerl",
                    "email" : "tomaz.vajngerl@collabora.co.uk",
                    "date" : "2021-05-12 10:00:32.000000000",
                    "tz" : 540
                },
                "committer" : {
                    "name" : "Tomaž Vajngerl",
                    "email" : "tomaz.vajngerl@collabora.co.uk",
                    "date" : "2021-06-15 03:27:40.000000000",
                    "tz" : 540
                },
                "subject" : "basegfx: generalise tuples with template class Tuple2D and Tuple3D",
                "message" : "basegfx: generalise tuples with template class Tuple2D and Tuple3D\n\nB2DTuple2D, B2ITuple2D and B2I64Tuple share a lot in common so\nwe can generalise it as a template class. The same goes for the\n3D variants - B3DTuple and B3ITuple.\n\nThis is the initial attempt, but doesn't yet generalise all that\nis possible.\n\nAdd some tests for the tuple variants that test the behaviour of\noverloaded operators and other common methods.\n\nChange-Id: Iee5ed15d58ea88e65ee7854bd05a87ceab22023d\n",
                "web_links" : [
                    {
                        "name" : "browse",
                        "url" : "https://git.libreoffice.org/core/commit/7cf742e7901767fad19fa378ee028be3b76a4159",
                        "target" : "_blank"
                    }
                ]
            },
            "commit_with_footers" : "basegfx: generalise tuples with template class Tuple2D and Tuple3D\n\nB2DTuple2D, B2ITuple2D and B2I64Tuple share a lot in common so\nwe can generalise it as a template class. The same goes for the\n3D variants - B3DTuple and B3ITuple.\n\nThis is the initial attempt, but doesn't yet generalise all that\nis possible.\n\nAdd some tests for the tuple variants that test the behaviour of\noverloaded operators and other common methods.\n\nChange-Id: Iee5ed15d58ea88e65ee7854bd05a87ceab22023d\nReviewed-on: https://gerrit.libreoffice.org/c/core/+/117104\n"
        },
        "2fa6ff88a570d1279408cc171eb867585a0481c1" : {
            "kind" : "REWORK",
            "_number" : 2,
            "created" : "2021-06-14 11:14:51.000000000",
            "uploader" : {
                "_account_id" : 1000154,
                "name" : "Tomaž Vajngerl",
                "email" : "quikee@gmail.com",
                "username" : "tvajngerl"
            },
            "ref" : "refs/changes/04/117104/2",
            "fetch" : {
                "anonymous http" : {
                    "url" : "https://git.libreoffice.org/core",
                    "ref" : "refs/changes/04/117104/2",
                    "commands" : {
                        "Branch" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/2 && git checkout -b change-117104-2 FETCH_HEAD",
                        "Checkout" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/2 && git checkout FETCH_HEAD",
                        "Cherry Pick" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/2 && git cherry-pick FETCH_HEAD",
                        "Format Patch" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/2 && git format-patch -1 --stdout FETCH_HEAD",
                        "Pull" : "git pull \"https://git.libreoffice.org/core\" refs/changes/04/117104/2"
                    }
                }
            },
            "commit" : {
                "parents" : [
                    {
                        "commit" : "d5d82bb197436fd323550a96dd239187df9eb3b0",
                        "subject" : "pragma once - BackendCapabilities",
                        "web_links" : [
                            {
                                "name" : "browse",
                                "url" : "https://git.libreoffice.org/core/commit/d5d82bb197436fd323550a96dd239187df9eb3b0",
                                "target" : "_blank"
                            }
                        ]
                    }
                ],
                "author" : {
                    "name" : "Tomaž Vajngerl",
                    "email" : "tomaz.vajngerl@collabora.co.uk",
                    "date" : "2021-05-12 10:00:32.000000000",
                    "tz" : 540
                },
                "committer" : {
                    "name" : "Tomaž Vajngerl",
                    "email" : "tomaz.vajngerl@collabora.co.uk",
                    "date" : "2021-06-14 11:09:56.000000000",
                    "tz" : 540
                },
                "subject" : "basegfx: generalise tuples with template class Tuple2D and Tuple3D",
                "message" : "basegfx: generalise tuples with template class Tuple2D and Tuple3D\n\nB2DTuple2D, B2ITuple2D and B2I64Tuple share a lot in common so\nwe can generalise it as a template class. The same goes for the\n3D variants - B3DTuple and B3ITuple.\n\nThis is the initial attempt, but doesn't yet generalise all that\nis possible.\n\nAdd some tests for the tuple variants that test the behaviour of\noverloaded operators and other common methods.\n\nChange-Id: Iee5ed15d58ea88e65ee7854bd05a87ceab22023d\n",
                "web_links" : [
                    {
                        "name" : "browse",
                        "url" : "https://git.libreoffice.org/core/commit/2fa6ff88a570d1279408cc171eb867585a0481c1",
                        "target" : "_blank"
                    }
                ]
            }
        },
        "3b492f5711379359e3c6e5a21308482ad5565563" : {
            "kind" : "TRIVIAL_REBASE",
            "_number" : 3,
            "created" : "2021-06-14 23:07:17.000000000",
            "uploader" : {
                "_account_id" : 1000154,
                "name" : "Tomaž Vajngerl",
                "email" : "quikee@gmail.com",
                "username" : "tvajngerl"
            },
            "ref" : "refs/changes/04/117104/3",
            "fetch" : {
                "anonymous http" : {
                    "url" : "https://git.libreoffice.org/core",
                    "ref" : "refs/changes/04/117104/3",
                    "commands" : {
                        "Branch" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/3 && git checkout -b change-117104-3 FETCH_HEAD",
                        "Checkout" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/3 && git checkout FETCH_HEAD",
                        "Cherry Pick" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/3 && git cherry-pick FETCH_HEAD",
                        "Format Patch" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/3 && git format-patch -1 --stdout FETCH_HEAD",
                        "Pull" : "git pull \"https://git.libreoffice.org/core\" refs/changes/04/117104/3"
                    }
                }
            },
            "commit" : {
                "parents" : [
                    {
                        "commit" : "de7356c2e0cb099fac396808b5a86a0393b48e5f",
                        "subject" : "Update git submodules",
                        "web_links" : [
                            {
                                "name" : "browse",
                                "url" : "https://git.libreoffice.org/core/commit/de7356c2e0cb099fac396808b5a86a0393b48e5f",
                                "target" : "_blank"
                            }
                        ]
                    }
                ],
                "author" : {
                    "name" : "Tomaž Vajngerl",
                    "email" : "tomaz.vajngerl@collabora.co.uk",
                    "date" : "2021-05-12 10:00:32.000000000",
                    "tz" : 540
                },
                "committer" : {
                    "name" : "Tomaž Vajngerl",
                    "email" : "tomaz.vajngerl@collabora.co.uk",
                    "date" : "2021-06-14 23:07:09.000000000",
                    "tz" : 540
                },
                "subject" : "basegfx: generalise tuples with template class Tuple2D and Tuple3D",
                "message" : "basegfx: generalise tuples with template class Tuple2D and Tuple3D\n\nB2DTuple2D, B2ITuple2D and B2I64Tuple share a lot in common so\nwe can generalise it as a template class. The same goes for the\n3D variants - B3DTuple and B3ITuple.\n\nThis is the initial attempt, but doesn't yet generalise all that\nis possible.\n\nAdd some tests for the tuple variants that test the behaviour of\noverloaded operators and other common methods.\n\nChange-Id: Iee5ed15d58ea88e65ee7854bd05a87ceab22023d\n",
                "web_links" : [
                    {
                        "name" : "browse",
                        "url" : "https://git.libreoffice.org/core/commit/3b492f5711379359e3c6e5a21308482ad5565563",
                        "target" : "_blank"
                    }
                ]
            }
        },
        "4c4efebfeb1937b49b5b25cd5d9850163968533c" : {
            "kind" : "REWORK",
            "_number" : 1,
            "created" : "2021-06-14 02:18:50.000000000",
            "uploader" : {
                "_account_id" : 1000154,
                "name" : "Tomaž Vajngerl",
                "email" : "quikee@gmail.com",
                "username" : "tvajngerl"
            },
            "ref" : "refs/changes/04/117104/1",
            "fetch" : {
                "anonymous http" : {
                    "url" : "https://git.libreoffice.org/core",
                    "ref" : "refs/changes/04/117104/1",
                    "commands" : {
                        "Branch" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/1 && git checkout -b change-117104-1 FETCH_HEAD",
                        "Checkout" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/1 && git checkout FETCH_HEAD",
                        "Cherry Pick" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/1 && git cherry-pick FETCH_HEAD",
                        "Format Patch" : "git fetch \"https://git.libreoffice.org/core\" refs/changes/04/117104/1 && git format-patch -1 --stdout FETCH_HEAD",
                        "Pull" : "git pull \"https://git.libreoffice.org/core\" refs/changes/04/117104/1"
                    }
                }
            },
            "commit" : {
                "parents" : [
                    {
                        "commit" : "d5d82bb197436fd323550a96dd239187df9eb3b0",
                        "subject" : "pragma once - BackendCapabilities",
                        "web_links" : [
                            {
                                "name" : "browse",
                                "url" : "https://git.libreoffice.org/core/commit/d5d82bb197436fd323550a96dd239187df9eb3b0",
                                "target" : "_blank"
                            }
                        ]
                    }
                ],
                "author" : {
                    "name" : "Tomaž Vajngerl",
                    "email" : "tomaz.vajngerl@collabora.co.uk",
                    "date" : "2021-05-12 10:00:32.000000000",
                    "tz" : 540
                },
                "committer" : {
                    "name" : "Tomaž Vajngerl",
                    "email" : "tomaz.vajngerl@collabora.co.uk",
                    "date" : "2021-06-13 06:52:52.000000000",
                    "tz" : 540
                },
                "subject" : "basegfx: generalise tuples with template class Tuple2D and Tuple3D",
                "message" : "basegfx: generalise tuples with template class Tuple2D and Tuple3D\n\nB2DTuple2D, B2ITuple2D and B2I64Tuple share a lot in common so\nwe can generalise it as a template class. The same goes for the\n3D variants - B3DTuple and B3ITuple.\n\nThis is the initial attempt, but doesn't yet generalise all that\nis possible.\n\nAdd some tests for the tuple variants that test the behaviour of\noverloaded operators and other common methods.\n\nChange-Id: Iee5ed15d58ea88e65ee7854bd05a87ceab22023d\n",
                "web_links" : [
                    {
                        "name" : "browse",
                        "url" : "https://git.libreoffice.org/core/commit/4c4efebfeb1937b49b5b25cd5d9850163968533c",
                        "target" : "_blank"
                    }
                ]
            },
            "files" : {
                "basegfx/source/tuple/b2dtuple.cxx" : {
                    "lines_inserted" : 1,
                    "lines_deleted" : 2,
                    "size_delta" : -11,
                    "size" : 1461
                },
                "basegfx/test/B2DTupleTest.cxx" : {
                    "lines_inserted" : 193,
                    "lines_deleted" : 11,
                    "size_delta" : 6215,
                    "size" : 7842
                },
                "include/basegfx/tuple/Tuple2D.hxx" : {
                    "status" : "A",
                    "lines_inserted" : 157,
                    "size_delta" : 3673,
                    "size" : 3673
                },
                "include/basegfx/tuple/Tuple3D.hxx" : {
                    "status" : "A",
                    "lines_inserted" : 139,
                    "size_delta" : 2981,
                    "size" : 2981
                },
                "include/basegfx/tuple/b2dtuple.hxx" : {
                    "lines_inserted" : 4,
                    "lines_deleted" : 117,
                    "size_delta" : -2434,
                    "size" : 4765
                },
                "include/basegfx/tuple/b2i64tuple.hxx" : {
                    "lines_inserted" : 8,
                    "lines_deleted" : 97,
                    "size_delta" : -2258,
                    "size" : 2540
                },
                "include/basegfx/tuple/b2ituple.hxx" : {
                    "lines_inserted" : 7,
                    "lines_deleted" : 112,
                    "size_delta" : -2552,
                    "size" : 2652
                },
                "include/basegfx/tuple/b3dtuple.hxx" : {
                    "lines_inserted" : 4,
                    "lines_deleted" : 108,
                    "size_delta" : -2262,
                    "size" : 6835
                },
                "include/basegfx/tuple/b3ituple.hxx" : {
                    "lines_inserted" : 4,
                    "lines_deleted" : 83,
                    "size_delta" : -1763,
                    "size" : 3093
                }
            }
        }
    },
    "status" : "NEW",
    "subject" : "basegfx: generalise tuples with template class Tuple2D and Tuple3D",
    "submit_type" : "CHERRY_PICK",
    "total_comment_count" : 0,
    "unresolved_comment_count" : 0,
    "updated" : "2021-06-15 03:28:23.000000000",
    "all_status" : "",
    "all_status_before_close" : "",
    "avg_build_time" : 1.79740740740741,
    "avg_build_time_before_close" : 1.79740740740741,
    "avg_time_between_msg" : 2.28719696969697,
    "avg_time_between_msg_before_close" : 2.28719696969697,
    "avg_time_between_revision" : 0,
    "avg_time_between_revision_before_close" : 0,
    "avg_time_revision" : 1.36291666666667,
    "avg_time_revision_before_close" : 1.36291666666667,
    "avg_time_to_add_human_reviewers" : 0,
    "avg_time_to_add_human_reviewers_before_close" : 0,
    "close_time" : "2021-06-15 03:28:23.000000000",
    "date_updated_date_created_diff" : 25.1591666666667,
    "date_updated_date_created_diff_original" : 25.1591666666667,
    "diff_created_close_time" : 25.1591666666667,
    "first_review_in_message_date" : 0,
    "first_review_in_message_date_before_close" : 0,
    "first_revision" : 1,
    "first_revision_kind" : "REWORK",
    "has_auto_tag_abandoned" : false,
    "has_auto_tag_abandoned_before_close" : false,
    "has_auto_tag_merged" : false,
    "has_auto_tag_merged_before_close" : false,
    "has_been_review_in_message" : false,
    "has_been_review_in_message_before_close" : false,
    "is_a_bot" : false,
    "is_inactive" : false,
    "is_inactive_before_close" : false,
    "is_review_close_date_equal_updated_time" : false,
    "is_self_review" : false,
    "is_trivial_rebase" : false,
    "max_inactive_time" : 9.03388888888889,
    "max_inactive_time_before_close" : 9.03388888888889,
    "messages_bot_count" : 7,
    "messages_bot_count_before_close" : 7,
    "messages_count" : 11,
    "messages_count_before_close" : 11,
    "messages_human_count" : 4,
    "messages_human_count_before_close" : 4,
    "messages_per_account" : [
        {
            "account" : 1000154,
            "num_messages" : 4
        },
        {
            "account" : 1000855,
            "num_messages" : 7
        }
    ],
    "messages_per_account_before_close" : [
        {
            "account" : 1000154,
            "num_messages" : 4
        },
        {
            "account" : 1000855,
            "num_messages" : 7
        }
    ],
    "new_status" : "NEW",
    "new_status_before_close" : "NEW",
    "num_of_build_failures" : 5,
    "num_of_build_failures_before_close" : 5,
    "num_of_build_success" : 0,
    "num_of_build_success_before_close" : 0,
    "owner_id" : 1000154,
    "review_close_date" : null,
    "revisions_num" : 4,
    "status_original" : "NEW",
    "updated_original" : "2021-06-15 03:28:23.000000000"
}]

//console.log(!json instanceof Array)

lastNumber = 1;
//console.log(typeof lastNumber === 'number')

//collectMetadata(json)
//console.log(MetricsUtils.isABot("1000239", "libreoffice"))

function ObjectId(text){
    return text;
}

String.prototype.camelCaseToDashed = function(){
    return this.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();
}

//console.log("author_timezone".camelCaseToDashed())
//console.log("authorTimezone".camelCaseToDashed())

//let dt = new Date().getTime();
//console.log(dt)

//console.log(get_days_of_the_weeks_date_created(json))

let date = "2021-06-14 23:30:00.000000000"

dateMoment = Moment.utc(date);
//console.log(dateMoment.toDate())
console.log(
    //Moment(date).subtract(10, 'days').format('YYYY-MM-DD HH:mm:ss.SSSSSSSSS')
    Moment.utc(date).subtract(10, 'days').toDate()
);


function get_hours_of_the_days(dateString) {
    let date = Moment.utc(dateString);
    return Moment.duration(date.format("HH:mm:ss.SSSSSSSSS")).asHours()
}
let hours = get_hours_of_the_days(date)
console.log(hours)
let hoursDivisions = function (hours, number_of_division){
    let divisions = Math.floor(hours / number_of_division);
    console.log(divisions)
    let inf = divisions * number_of_division
    let sup = divisions * number_of_division + number_of_division
    return inf + "_" + sup
}

//console.log(hoursDivisions(hours, 8))

//var arr = " yyyy-mm-dd hh:mm:ss".split(/-|\s|:/);// split string and create array.
var arr = date.split(/-|\s|:/);// split string and create array.
console.log(arr);
var dateFormat = new Date(Date.UTC(arr[0], arr[1] -1, arr[2], arr[3], arr[4], arr[5])); // decrease month value by 1
//console.log(new Date(dateFormat))

console.log(new Date(date))


/*db.changes.find().forEach(function(doc) {
    let created = doc.created;
    let updated = doc.updated;
    let arr_created = created.split(/-|\s|:/);
    let arr_updated = updated.split(/-|\s|:/);
    let date_created = new Date(Date.UTC(arr_created[0], arr_created[1] -1, arr_created[2], arr_created[3], arr_created[4], arr_created[5]));
    let date_updated = new Date(Date.UTC(arr_updated[0], arr_updated[1] -1, arr_updated[2], arr_updated[3], arr_updated[4], arr_updated[5]));
    doc.created = date_created;
    doc.updated = date_updated;
    db.changes.save(doc);
})*/

function get_month_for_owner(dateString) {
    return Moment.utc(dateString).format('MMMM')
}
//console.log(get_month_for_owner(date))


let filepath = "basegfx/test/B2DTupleTest.cxx"
let dir = filepath.substr(0, filepath.lastIndexOf('/') + 1);
let base_dir = filepath.substr(0, filepath.indexOf('/') + 1);
//console.log(parseInt(1))

//let date = "2021-06-14 12:00:00.000000000"
function get_precise_days_of_the_weeks_date_created(json) {
    let date = Moment.utc(json.created);
    return date.isoWeekday() + Moment.duration(date.format("hh:mm:ss.SSSSSSSSS")).asDays()
}

//console.log(get_month(date))

function get_month(dateString) {
    return Moment.utc(dateString, "YYYY-MM-DD hh:mm:ss.SSSSSSSSS").utcOffset(800).format('MMMM')
}

function get_days_of_the_weeks_date_create_2(date) {
    let days_of_the_week = Moment.utc(date).isoWeekday();
    let tmp = Moment.utc(date).format("hh:mm:ss.SSSSSSSSS");
    let hour = Moment.duration(tmp).asDays()
    return days_of_the_week + hour
}

async function collectMetadata(json) {
    let metadata = {};
    metadata["id"] = json.id
    metadata = get_owner_info(metadata, json)
    metadata = get_revision_info(metadata, json)
    metadata = get_time_info(metadata, json)
    metadata = {...metadata, ...get_messages_information(json.messages, json.created)}
    //metadata = deleteUnnecessary(metadata)

    metadata["close_time"] = json["updated"]
    if (metadata["review_close_date"])
        if (metadata["review_close_date"] < metadata["close_time"])
            metadata["close_time"] = metadata["review_close_date"]
    if (metadata["first_review_in_message_date"])
        if (metadata["first_review_in_message_date"] < metadata["close_time"])
            metadata["close_time"] = metadata["first_review_in_message_date"]

    metadata["diff_created_close_time"] = timeDiff(metadata["close_time"], json.created)

    let time_to_add_human_reviewers = get_time_to_add_human_reviewers(json, metadata["close_time"])
    metadata["avg_time_to_add_human_reviewers"] = time_to_add_human_reviewers.avg_time_to_add_human_reviewers;
    metadata["avg_time_to_add_human_reviewers_before_close"] = time_to_add_human_reviewers.avg_time_to_add_human_reviewers_before_close;

    let msg = get_messages_before_close(json.messages, metadata["close_time"])
    let msg_before_close_info = get_messages_information(msg, json.created)
    metadata = {...metadata, ...add_suffix_to_json(msg_before_close_info, '_before_close')}

    //console.log(metadata)

    //do get the smallest date
    //ab time to add reviewers
    //do new status
    //do revision before close time
    //todo work load of the owner.
    //todo delete outlier
    //todo delete all but 1st revision
    //todo add new features
    //build time avg per file
    //build time avg per branch
    //build time of owner
    //avg time of revision of file
    //avg time of revision of owner
    //avg time between revision owner
    //avg of fail of file
    //owner time to add reviewer
    //file build fail

    return metadata;
}

function add_suffix_to_json(json, suffix) {
    let new_json = {}
    if (json) {
        Object.keys(json).forEach(function (key) {
            new_json[key + suffix] = json[key]
        })
    }
    return new_json;
}

function get_time_to_add_human_reviewers(json, close_time) {
    let reviewers_updated = json["reviewer_updates"]; //todo correct
    let date_created = json["created"]
    let dateDiff = []
    let dateDiff_before_close = []
    if (!reviewers_updated)
        return {
            avg_time_to_add_human_reviewers: undefined,
            avg_time_to_add_human_reviewers_before_close: undefined
        };

    for (let i = 0; i < reviewers_updated.length; i++) {
        let updated = reviewers_updated[i];
        let reviewer_id = updated["reviewer"]["_account_id"];
        if (!MetricsUtils.isABot(reviewer_id, projectName)) {
            let date = updated["updated"]; //todo correct
            dateDiff.push(timeDiff(date_created, date))
            if (date < close_time)
                dateDiff_before_close.push(timeDiff(date_created, date))
        }
    }
    return {
        avg_time_to_add_human_reviewers: avg(dateDiff),
        avg_time_to_add_human_reviewers_before_close: avg(dateDiff_before_close)
    }
}

function avg(num_array) {
    return num_array.length > 0 ? MathJs.mean(num_array) : 0;
}

function get_owner_info(metadata, json) {
    if (json.owner) {
        let ownerId = json.owner._account_id;
        metadata["owner_id"] = ownerId;
        metadata["is_a_bot"] = MetricsUtils.isABot(ownerId, projectName);
        if (metadata["is_a_bot"])
            return Promise.resolve(false)
    }
    return metadata
}

function get_revision_info(metadata, json) {
    let revisions = json.revisions;
    if (revisions) {
        metadata["revisions_num"] = Object.keys(revisions).length
        metadata["first_revision"] = MetricsUtils.get_first_revision_number(json)
        metadata["first_revision_kind"] = MetricsUtils.get_first_revision_kind(json)
        metadata["is_trivial_rebase"] = MetricsUtils.is_trivial_rebase(json);
    }
    return metadata
}

function get_time_info(metadata, json) {
    metadata["review_close_date"] = get_review_time_in_label(json)
    metadata["date_updated_date_created_diff"] = timeDiff(json.created, json.updated)
    metadata["is_review_close_date_equal_updated_time"] = is_equal(metadata["review_close_date"], json.updated)
    if (metadata["review_close_date"])
        metadata["review_close_to_date_created_diff"] = timeDiff(json.created, metadata["review_close_date"])
    return metadata
}

function get_messages_before_close(messages, close_time) {
    let msgs = []
    for (let k in messages) {
        let msg = messages[k];
        let date = msg.date;
        if (date <= close_time) {
            msgs.push(msg)
        }
    }
    return msgs;
}

function get_messages_information(messages, date_created) {
    if (!messages)
        return {}

    let messages_count = Object.keys(messages).length;
    let messages_per_account = {}
    let messages_human_count = 0
    let messages_bot_count = 0
    let message_review_time = [];
    let has_auto_tag_merged = false;
    let has_auto_tag_abandoned = false;

    let time_diff_between_messages = []
    let lastTime = 0
    let has_been_review = false;
    let last_revision_number = 0;
    let revisions_list = [];
    let build_message_list = [];
    let new_status = ""

    for (let i = 0; i < messages.length; i++) {
        let message = messages[i];
        let date = message.date;

        if (!message.author)
            continue;

        let code_review = analyse_code_review(message)
        if (code_review !== undefined) {
            if (code_review["Code-Review"] === 2 || code_review["Code-Review"] === -2) {
                message_review_time.push(code_review["date"])
                has_been_review = true;
                if (code_review["Code-Review"] === 2)
                    new_status = "MERGED"
                if (code_review["Code-Review"] === -2)
                    new_status = "ABANDONED"
            }
        }

        let auto_tag = analyse_auto_tag(message)
        if (auto_tag !== undefined) {
            if (auto_tag["tag"] === "merged")
                has_auto_tag_merged = true
            else if (auto_tag["tag"] === "abandoned")
                has_auto_tag_abandoned = true
        }

        let author = messages[i].author._account_id;

        //count message per account
        if (!messages_per_account[author])
            messages_per_account[author] = 1;
        else
            messages_per_account[author] = messages_per_account[author] + 1;

        //count bot message
        if (MetricsUtils.isABot(author, projectName)) {
            messages_bot_count += 1
        } else {
            messages_human_count += 1
        }

        //analyse time between message
        if (i === 0) {
            let diff_time = timeDiff(date_created, date)
            time_diff_between_messages.push(diff_time)
        }
        if (lastTime !== 0) {
            let diff_time = timeDiff(lastTime, date)
            time_diff_between_messages.push(diff_time)
        }

        //analyse time between revision
        let revision_number = message._revision_number;
        if (last_revision_number !== revision_number) {
            if(revisions_list.length === 0){
                let rev = {revision: revision_number, start: date_created}
                revisions_list.push(rev)
            }
            else {
                let rev = {revision: revision_number, start: date}
                revisions_list.push(rev)
            }
            if (revisions_list.length >= 1) {
                revisions_list[revisions_list.length - 1]["end"] = date;
            }
            last_revision_number = revision_number;
        } else {
            revisions_list[revisions_list.length - 1]["end"] = date;
        }

        if (i === messages.length - 1) {
            revisions_list[revisions_list.length - 1]["end"] = date;
        }

        //analyse build time
        let bot_build_info = get_bot_message(message)
        if (bot_build_info !== undefined)
            build_message_list.push(bot_build_info);

        lastTime = Moment.utc(date);
    }
    console.log(revisions_list)
    let first_review_in_message_date = message_review_time.length > 0 ? message_review_time[0] : 0

    //analyse all info collected
    let max_inactive_time = time_diff_between_messages.length > 0 ? MathJs.max(time_diff_between_messages) : 0
    let is_inactive = false;
    if (max_inactive_time > 1460) {
        //3 month 2190 //2 month 1460
        is_inactive = true
    }

    let avg_time_between_msg = time_diff_between_messages.length > 0 ? MathJs.mean(time_diff_between_messages) : 0

    let revision_time = []
    let time_between_revision = []
    for (let i = 0; i < revisions_list.length; i++) {
        let rev_item = revisions_list[i];
        let start = rev_item["start"];
        let end = rev_item["end"];
        revision_time.push(timeDiff(start, end))
        if (i > 0) {
            time_between_revision.push(timeDiff(revisions_list[i - 1]["end"], revisions_list[i]["start"]))
        }
    }

    console.log(time_between_revision)
    let avg_time_revision = revision_time.length > 0 ? MathJs.mean(revision_time) : 0
    let avg_time_between_revision = time_between_revision.length > 0 ? MathJs.mean(time_between_revision) : 0
    console.log(avg_time_between_revision)

    //message per account
    let messages_per_account_array = []
    for (let key in messages_per_account) {
        messages_per_account_array.push({account: key, num_messages: messages_per_account[key]})
    }

    //analyse build info
    let build_info = analyse_build_info(build_message_list, revisions_list)
    let avg_build_time = build_info.avg_time_of_build;
    let num_of_build_success = build_info.num_of_build_success;
    let num_of_build_failures = build_info.num_of_build_failures;

    return {
        messages_count: messages_count,
        messages_per_account: messages_per_account_array,
        messages_human_count: messages_human_count,
        messages_bot_count: messages_bot_count,
        new_status: new_status,
        is_inactive: is_inactive,
        max_inactive_time: max_inactive_time,
        has_auto_tag_merged: has_auto_tag_merged,
        has_auto_tag_abandoned: has_auto_tag_abandoned,
        avg_time_between_msg: avg_time_between_msg,
        avg_time_revision: avg_time_revision,
        avg_time_between_revision: avg_time_between_revision,
        has_been_review_in_message: has_been_review,
        first_review_in_message_date: first_review_in_message_date,
        avg_build_time: avg_build_time,
        num_of_build_success: num_of_build_success,
        num_of_build_failures: num_of_build_failures,
    };
}

function get_bot_message(message_info) {
    if (!message_info.author)
        return undefined;

    let date = message_info.date;
    let revision_number = message_info._revision_number;
    let author_id = message_info.author._account_id;
    let message = message_info.message;
    let is_a_bot = MetricsUtils.isABot(author_id, projectName)
    if (!is_a_bot)
        return undefined

    //let url_pat = /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&\/\/=]*)/gm
    let url_pat = /\bhttps?:\/\/\S+/gi
    const urls = message.match(url_pat);

    if (['qt'].includes(projectName)) {
        let build_start_patt = /.*(Added to build .* for .*|Pre Continuous Integration Quick Check: Running).*/mi
        let build_success_patt = /.*(Continuous Integration: Passed|Pre Continuous Integration Quick Check: Passed).*/mi
        let build_failed_patt = /.*(Continuous Integration: (Failed|Cancelled)|Pre Continuous Integration Quick Check: (Failed|Cancelled)).*/mi;
        let ref_patt = /\brefs\/builds\/[^\s-]*\/\d+/i
        let urls_ref_patt = /\bhttps:\/\/testresults.qt.io\/\S+/i
        let refs = message.match(ref_patt);

        if (message.match(ref_patt))
            refs = message.match(ref_patt)[0]
        else if (message.match(urls_ref_patt))
            refs = message.match(urls_ref_patt)[0];

        if (build_start_patt.test(message)) {
            return {
                date: date,
                "ci_tag": "started",
                author_id: author_id,
                url: urls,
                revision_number: revision_number,
                refs: refs
            }
        } else if (build_success_patt.test(message)) {
            return {
                date: date,
                "ci_tag": "success",
                author_id: author_id,
                failed: false,
                success: true,
                url: urls,
                revision_number: revision_number,
                refs: refs
            }
        } else if (build_failed_patt.test(message)) {
            return {
                date: date,
                ci_tag: "failed",
                author_id: author_id,
                failed: true,
                success: false,
                url: urls,
                revision_number: revision_number,
                refs: refs
            }
        }

    }
    else if (['android'].includes(projectName)) {
        let build_start_patt = /.*Started presubmit run: .*/mi
        let build_finished_patt = /.*TreeHugger finished with: .*/mi
        let verified_failed_patt = /.*Presubmit-Verified(-1|-2).*/mi
        let verified_success_patt = /.*Presubmit-Verified(\+1|\+2).*/mi
        let ref_patt = /\bhttps?:\/\/android-build.googleplex.com\/builds\/\S+/i
        let build_refs_patt = /L[0-9]+\S+/i
        const refs = message.match(ref_patt) ? message.match(ref_patt)[0] : null;
        const build_refs = message.match(build_refs_patt) ? message.match(build_refs_patt)[0] : null;
        /*console.log(refs)
        console.log(build_refs)
        if(refs)
            console.log(message)*/
        if (build_start_patt.test(message)) {
            //console.log(message)
            return {
                date: date,
                ci_tag: "started",
                author_id: author_id,
                url: urls,
                revision_number: revision_number,
                refs: refs,
                build_refs: build_refs,
            }
        } else if (build_finished_patt.test(message)) {
            const failed = verified_failed_patt.test(message);
            const success = verified_success_patt.test(message);
            return {
                date: date,
                "ci_tag": "finished",
                author_id: author_id,
                url: urls,
                failed: failed,
                success: success,
                revision_number: revision_number,
                refs: refs,
                build_refs: build_refs,
            }
        }
    }
    //if (['libreoffice', 'asterisk', 'scilab', 'eclipse', 'onap'].contains(projectName)) {
    else {
        let build_start_patt = /.*Build (Started|queued).*\bhttps?:\/\/\S+.*/mi
        let build_success_patt = /.*Build Successful.*\bhttps?:\/\/\S+.* : SUCCESS/smi
        let build_succeeded_patt = /Build (succeeded|failed) \(check pipeline\)/i
        let build_failed_patt = /.*Build Failed.*\bhttps?:\/\/\S+.* : (FAILURE|ABORTED)/smi;

        let url_pat = /\bhttps?:\/\/\S+ : (SUCCESS|FAILURE|ABORTED)+/gi
        let url_pat_2 = /\bhttps?:\/\/\S+/gi
        let success_pat = /\bSUCCESS\b/gi
        let failure_pat = /\bFAILURE\b/gi
        //let failure_pat = /\bSKIPPED\S+/gi
        let refs_temp = message.match(url_pat);
        let refs = message.match(url_pat_2);

        if (refs_temp)
            refs = refs_temp.toString().match(url_pat_2)

        let success_num = message.match(success_pat) ? message.match(success_pat).length : 0;
        let fail_num = message.match(failure_pat) ? message.match(failure_pat).length : 0;

        if (build_start_patt.test(message)) {
            return {
                date: date, "ci_tag": "started",
                author_id: author_id,
                url: urls,
                revision_number: revision_number,
                refs: refs
            }
        } else if (build_success_patt.test(message)) {
            return {
                date: date, "ci_tag": "success",
                author_id: author_id,
                url: urls,
                failed: false,
                success: true,
                revision_number: revision_number,
                refs: refs,
                fail_num: fail_num,
                success_num: success_num
            }
        } else if (build_failed_patt.test(message)) {
            return {
                date: date, "ci_tag": "failed",
                author_id: author_id,
                url: urls,
                revision_number: revision_number,
                failed: true,
                success: false, refs: refs,
                fail_num: fail_num,
                success_num: success_num
            }
        } else if (build_succeeded_patt.test(message)) {

            return {
                date: date,
                "ci_tag": "succeeded",
                author_id: author_id,
                url: urls,
                revision_number: revision_number,
                fail_num: fail_num,
                success_num: success_num
            }
        }
    }

    return undefined
}

function analyse_android_build_info(build_message_list, revisions_list) {
    let build_time = {};
    let num_of_build_success = 0;
    let num_of_build_failures = 0;
    let avg_time_of_build = 0;
    let build_time_array = [];

    for (let i = 0; i < build_message_list.length; i++) {
        let build_message = build_message_list[i];
        if (build_message["ci_tag"] === "started") {
            let refs = build_message["refs"]
            if (!build_time[refs])
                build_time[refs] = {}
            build_time[refs]["started"] = build_message["date"];
        } else if (build_message["ci_tag"] === "finished") {
            let refs = build_message["refs"]
            if (!build_time[refs])
                build_time[refs] = {}
            build_time[refs]["finished"] = build_message["date"];
            if (build_message["failed"])
                num_of_build_failures += 1
            if (build_message["success"])
                num_of_build_success += 1
        }

    }
    for (let key in build_time) {
        build_time_array.push(timeDiff(build_time[key]["started"], build_time[key]["finished"]))
    }

    avg_time_of_build = build_time_array.length > 0 ? MathJs.mean(build_time_array) : 0
    return {
        avg_time_of_build: avg_time_of_build,
        num_of_build_success: num_of_build_success,
        num_of_build_failures: num_of_build_failures,
    }
}

function analyse_qt_build_info(build_message_list, revisions_list) {
    let build_time = {};
    let num_of_build_success = 0;
    let num_of_build_failures = 0;
    let avg_time_of_build = 0;
    let build_time_array = [];

    for (let i = 0; i < build_message_list.length; i++) {
        let build_message = build_message_list[i];
        if (build_message["ci_tag"] === "started") {
            let refs = build_message["refs"]
            if (!build_time[refs])
                build_time[refs] = {}
            build_time[refs]["started"] = build_message["date"];
        } else if (build_message["ci_tag"] === "failed" || build_message["ci_tag"] === "success") {
            let refs = build_message["refs"]
            if (!build_time[refs])
                build_time[refs] = {}
            build_time[refs]["finished"] = build_message["date"];
            if (build_message["failed"])
                num_of_build_failures += 1
            if (build_message["success"])
                num_of_build_success += 1
        }

    }

    for (let key in build_time) {
        let start = build_time[key]["started"]
        if (!start)
            start = get_revision_started_date(build_time[key]["revision_number"], revisions_list)
        if (start && build_time[key]["finished"])
            build_time_array.push(timeDiff(start, build_time[key]["finished"]))
    }

    avg_time_of_build = build_time_array.length > 0 ? MathJs.mean(build_time_array) : 0
    return {
        avg_time_of_build: avg_time_of_build,
        num_of_build_success: num_of_build_success,
        num_of_build_failures: num_of_build_failures,
    }
}

function analyse_project_build_info(build_message_list, revisions_list) {
    //console.log(build_message_list)
    let build_time = {};
    let num_of_build_success = 0;
    let num_of_build_failures = 0;
    let avg_time_of_build = 0;
    let build_time_array = [];
    let build_succeeded_time = [];

    for (let i = 0; i < build_message_list.length; i++) {
        let build_message = build_message_list[i];
        if (build_message["ci_tag"] === "succeeded") {
            build_succeeded_time.push(
                {
                    date: build_message["date"],
                    revision_number: build_message["revision_number"],
                    success_num: build_message["success_num"],
                    fail_num: build_message["fail_num"]
                }
            )
        } else if (build_message["ci_tag"] === "started") {
            let refs = build_message["refs"]
            for (let k in refs) {
                let ref = refs[k]
                if (!build_time[ref])
                    build_time[ref] = {}
                //console.log(JSON.stringify(build_time))
                build_time[ref]["started"] = build_message["date"];
            }
        } else if (build_message["ci_tag"] === "failed" || build_message["ci_tag"] === "success") {
            let refs = build_message["refs"]
            for (let k in refs) {
                let ref = refs[k]
                if (!build_time[ref])
                    build_time[ref] = {}
                build_time[ref]["finished"] = build_message["date"];
                if (build_message["fail_num"])
                    num_of_build_failures += build_message["fail_num"]
                if (build_message["fail_num"])
                    num_of_build_success += build_message["fail_num"]
            }
        }
    }

    let build_time_array_for_all = []

    //console.log(build_succeeded_time)

    //For all bot
    for (let k in build_succeeded_time) {
        let bst = build_succeeded_time[k]
        num_of_build_failures = bst["fail_num"]
        num_of_build_success = bst["success_num"]
        let revision_start_date = get_revision_started_date(bst["revision_number"], revisions_list)
        build_time_array_for_all.push(timeDiff(revision_start_date, bst["date"]))
        //console.log(revision_start_date + " - " + bst["date"])
        //console.log(build_time["finished"])
    }

    //For individual bot
    for (let key in build_time) {
        let start = build_time[key]["started"]
        if (!start)
            start = get_revision_started_date(build_time[key]["revision_number"], revisions_list)
        if (start && build_time[key]["finished"])
            build_time_array.push(timeDiff(start, build_time[key]["finished"]))
    }

    if (build_time_array_for_all.length > 0) {
        avg_time_of_build = build_time_array_for_all.length > 0 ? MathJs.mean(build_time_array_for_all) : 0
    } else {
        avg_time_of_build = build_time_array.length > 0 ? MathJs.mean(build_time_array) : 0
    }

    //console.log(build_time)
    //console.log(build_time_array_for_all)

    return {
        avg_time_of_build: avg_time_of_build,
        num_of_build_success: num_of_build_success,
        num_of_build_failures: num_of_build_failures,
    }
}

function get_revision_started_date(revision_number, revisions_list) {
    for (let k in revisions_list) {
        let rev = revisions_list[k];
        if (rev.revision === revision_number)
            return rev.start
    }
}

function analyse_build_info(build_message_list, revisions_list) {
    if (['android'].includes(projectName)) {
        return analyse_android_build_info(build_message_list, revisions_list)
    } else if (['qt'].includes(projectName)) {
        return analyse_qt_build_info(build_message_list, revisions_list)
    } else {
        return analyse_project_build_info(build_message_list, revisions_list)
    }
}

function analyse_auto_tag(message_info) {
    let pat_auto_tag_merged = /.*autogenerated:gerrit:merged.*/;
    let pat_auto_tag_abandon = /.*autogenerated:gerrit:abandon.*/;
    let date = message_info.date;

    if (!message_info.author)
        return undefined;
    let author_id = message_info.author._account_id;

    let message = message_info.message;
    if (pat_auto_tag_merged.test(message)) {
        return {date: date, tag: "merged", author_id: author_id}
    } else if (pat_auto_tag_abandon.test(message)) {
        return {date: date, tag: "abandoned", author_id: author_id}
    } else {
        return undefined
    }
}

function analyse_code_review(message_info) {
    let pat_plus_2 = /.*Code-Review\+2.*/;
    let pat_plus_1 = /.*Code-Review\+1.*/;
    let pat_minus_2 = /.*Code-Review-2.*/;
    let pat_minus_1 = /.*Code-Review-1.*/;
    let date = message_info.date;

    if (!message_info.author)
        return undefined;

    let author_id = message_info.author._account_id;

    let message = message_info.message
    if (pat_plus_2.test(message)) {
        return {date: date, "Code-Review": 2, author_id: author_id}
    } else if (pat_minus_2.test(message)) {
        return {date: date, "Code-Review": -2, author_id: author_id}
    } else if (pat_plus_1.test(message)) {
        return {date: date, "Code-Review": 1, author_id: author_id}
    } else if (pat_minus_1.test(message)) {
        return {date: date, "Code-Review": -1, author_id: author_id}
    } else {
        return undefined
    }
}

function is_equal(time1, time2) {
    return time1 === time2;
}

function get_review_time_in_label(json) {
    let labels = json["labels"];
    let time = undefined

    if (!!!labels)
        return time;

    let code_review = []
    if (labels["Code-Review"]) {
        if (labels["Code-Review"]["all"])
            code_review = labels["Code-Review"]["all"];
        else
            return time;
    } else {
        return time;
    }

    for (let i = 0; i < code_review.length; i++) {
        let review = code_review[i];
        let value = review.value;
        if (value === 2 || value === -2) {
            time = review.date
        }
    }
    return time;
}

function timeDiff(time1, time2) {
    let createdTime = Moment.utc(time1);
    let updatedTime = Moment.utc(time2);
    let time = Math.abs(createdTime.toDate() - updatedTime.toDate());
    return Moment.duration(time).asHours()
}
